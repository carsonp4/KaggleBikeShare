library(vroom)
library(tidyverse)
library(corrplot)
library(gridExtra)
# Reading in Data
train <- vroom("Desktop/Stat348/KaggleBikeShare/train.csv")
# Changing Variables
# datetime - hourly date + timestamp
train$season <- as.factor(train$season) # 1 = spring, 2 = summer, 3 = fall, 4 = winter
train$holiday <- as.factor(train$holiday) # whether the day is considered a holiday
train$workingday <- as.factor(train$workingday) # whether the day is neither a weekend nor holiday
library(vroom)
library(tidyverse)
library(corrplot)
library(gridExtra)
# Reading in Data
train <- vroom("Desktop/Stat348/KaggleBikeShare/train.csv")
# Reading in Data
train <- vroom("train.csv")
# Changing Variables
# datetime - hourly date + timestamp
train$season <- as.factor(train$season) # 1 = spring, 2 = summer, 3 = fall, 4 = winter
train$holiday <- as.factor(train$holiday) # whether the day is considered a holiday
train$workingday <- as.factor(train$workingday) # whether the day is neither a weekend nor holiday
train$weather <- as.factor(train$weather) #1: Clear, Few clouds, Partly cloudy, Partly cloudy 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
# Plot to upload
data_info <- DataExplorer::plot_intro(train)
corr_con <- DataExplorer::plot_correlation(train, type="continuous")
bar_dis <- DataExplorer::plot_bar(train)
hist_con <- DataExplorer::plot_histogram(train)
(data_info + corr_con) / (bar_dis + hist_con)
plot_list <- c(data_info, corr_con, bar_dis, hist_con)
grid.arrange(grobs = plot_list, ncol = 2)
# Plot to upload
data_info <- DataExplorer::plot_intro(train)
corr_con <- DataExplorer::plot_correlation(train, type="continuous")
bar_dis <- DataExplorer::plot_bar(train)
hist_con <- DataExplorer::plot_histogram(train)
(data_info + corr_con) / (bar_dis + hist_con)
rlang::last_trace()
plot_list <- c(data_info, corr_con, bar_dis, hist_con)
grid.arrange(grobs = plot_list, ncol = 2)
grid.arrange(data_info, corr_con)
grid.arrange(data_info, corr_con, bar_dis, hist_con, ncol=2)
class(bar_dis)
bar_dist[[1]]
bar_dis[[1]]
grid.arrange(data_info, corr_con, bar_dis[[1]], hist_con, ncol=2)
grid.arrange(data_info, corr_con, bar_dis[[1]], hist_con[[1]], ncol=2)
(data_info + corr_con) / (bar_dis[[1]] + hist_con[[1]])
plot_list <- c(data_info, corr_con, bar_dis[[1]], hist_con[[1]])
grid.arrange(grobs = plot_list, ncol = 2)
grid.arrange(data_info, corr_con, bar_dis[[1]], hist_con[[1]], ncol=2)
library(vroom)
library(tidyverse)
library(corrplot)
library(gridExtra)
# Reading in Data
train <- vroom("train.csv")
# Changing Variables
# datetime - hourly date + timestamp
train$season <- as.factor(train$season) # 1 = spring, 2 = summer, 3 = fall, 4 = winter
train$holiday <- as.factor(train$holiday) # whether the day is considered a holiday
train$workingday <- as.factor(train$workingday) # whether the day is neither a weekend nor holiday
train$weather <- as.factor(train$weather) #1: Clear, Few clouds, Partly cloudy, Partly cloudy 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
# Different EDA
dplyr::glimpse(train) # lists the variable type of each column
skimr::skim(train) # dataset overview
DataExplorer::plot_intro(train) # visualization of glimpse()
DataExplorer::plot_correlation(train) # correlation heat map between variables
DataExplorer::plot_bar(train) # bar charts of all discrete variables
DataExplorer::plot_histogram(train) # histograms of all numerical variables
DataExplorer::plot_missing(train) # percent missing in each column
# Plot to upload
data_info <- DataExplorer::plot_intro(train)
corr_con <- DataExplorer::plot_correlation(train, type="continuous")
bar_dis <- DataExplorer::plot_bar(train)
hist_con <- DataExplorer::plot_histogram(train)
grid.arrange(data_info, corr_con, bar_dis[[1]], hist_con[[1]], ncol=2)
View(train)
# Data Wrangling
install.packages("tidymodels")
install.packages("tidymodels")
# Data Wrangling
library(tidyverse)
library(tidymodels)
library(tidymodels)
# Reading in Data
train <- vroom("train.csv")
# Reading in Data
train <- vroom("train.csv")
# Dplyr cleaning section
train$weather
# Dplyr cleaning section
train$weather == 4
# Dplyr cleaning section
train$weather[train$weather == 4] <- 3
# Dplyr cleaning section
train <- train %>%
mutate(weather = ifelse(weather == 4, 3, weather))
my_recipe <- recipe(Count ~ ., data = train) %>%
step_rm(casual)
library(tidymodels)
install.packages("broom")
install.packages("broom")
library(tidymodels)
# Reading in Data
train <- vroom("Desktop/Stat348/KaggleBikeShare/train.csv")
# Dplyr cleaning section
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_temp = mean(temp, na.rm = TRUE))
# Data Wrangling
library(tidyverse)
library(tidymodels)
library(vroom)
# Reading in Data
train <- vroom("Desktop/Stat348/KaggleBikeShare/train.csv")
# Reading in Data
train <- vroom("train.csv")
# Dplyr cleaning section
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_temp = mean(temp, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_humidty = mean(humidity, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_wind = mean(windspeed, na.rm = TRUE))
my_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(weather, levels=c("Sunny", "Mist", "Rain")) %>%
step_num2factor(season, levels=c("Spring", "Summer", "Fall", "Winter")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_date(datetime, features="dow") %>%
step_time(datetime, features="hour") %>%
#step_dummy(all_nominal_predictors()) %>%
#step_zv(all_predictors()) %>%
step_rm(casual, registered, datetime)
prepped_recipe <- prep(my_recipe)
wrangled <- bake(prepped_recipe, new_data = train)
View(wrangled)
# Data Wrangling
library(tidyverse)
library(tidymodels)
library(vroom)
# Reading in Data
train <- vroom("train.csv")
# Dplyr cleaning section
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_temp = mean(temp, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_humidty = mean(humidity, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_wind = mean(windspeed, na.rm = TRUE))
my_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(weather, levels=c("Sunny", "Mist", "Rain")) %>%
step_num2factor(season, levels=c("Spring", "Summer", "Fall", "Winter")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_date(datetime, features="dow") %>%
step_time(datetime, features="hour") %>%
#step_dummy(all_nominal_predictors()) %>%
#step_zv(all_predictors()) %>%
step_rm(casual, registered, datetime)
prepped_recipe <- prep(my_recipe)
wrangled <- bake(prepped_recipe, new_data = train)
View(wrangled)
# Reading in Data
train <- vroom("train.csv")
# Dplyr cleaning section
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_temp = mean(temp, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_humidty = mean(humidity, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_wind = mean(windspeed, na.rm = TRUE))
my_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(weather, levels=c("Sunny", "Mist", "Rain")) %>%
step_num2factor(season, levels=c("Spring", "Summer", "Fall", "Winter")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_date(datetime, features="dow") %>%
step_time(datetime, features="hour") %>%
#step_dummy(all_nominal_predictors()) %>%
#step_zv(all_predictors()) %>%
step_rm(casual, registered, datetime, date)
prepped_recipe <- prep(my_recipe)
wrangled <- bake(prepped_recipe, new_data = train)
my_mod <- linear_reg() %>% #Type of model
set_engine("lm") # Engine = What R function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = wrangled) # Fit the workflow
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = train) # Fit the workflow
View(bike_workflow)
summary(bike_workflow)
View(my_mod)
test <- vroom("test.csv")
# Dplyr cleaning section
train %>% select(-casual, -registered)
# Dplyr cleaning section
train <- train %>% select(-casual, -registered)
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_temp = mean(temp, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_humidty = mean(humidity, na.rm = TRUE))
train <- train %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_wind = mean(windspeed, na.rm = TRUE))
View(train)
View(test)
test <- test %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_temp = mean(temp, na.rm = TRUE))
test <- test %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_temp = mean(temp, na.rm = TRUE))
test <- test %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_humidty = mean(humidity, na.rm = TRUE))
test <- test %>%
group_by(date = as.Date(datetime)) %>%
mutate(day_avg_wind = mean(windspeed, na.rm = TRUE))
# Recipe
my_recipe <- recipe(count ~ ., data = train) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(weather, levels=c("Sunny", "Mist", "Rain")) %>%
step_num2factor(season, levels=c("Spring", "Summer", "Fall", "Winter")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_date(datetime, features="dow") %>%
step_time(datetime, features="hour") %>%
#step_dummy(all_nominal_predictors()) %>%
#step_zv(all_predictors()) %>%
step_rm(datetime, date)
prepped_recipe <- prep(my_recipe)
wrangled <- bake(prepped_recipe, new_data = train)
my_mod <- linear_reg() %>% #Type of model
set_engine("lm") # Engine = What R function to use
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = train) # Fit the workflow
bike_predictions <- predict(bike_workflow,
new_data=test) # Use fit to predict
View(bike_predictions)
bike_predictions[bike_predictions < 0] <- 1
submit$date <- test$datetime
submit <- cbind(test$datetime, bike_predictions)
View(submit)
count <- bike_predictions
View(count)
count <- bike_predictions$.pred
submit <- cbind(test$datetime, count)
submit <- cbind(test$datetime, count)
bike_predictions <- predict(bike_workflow,
new_data=test) # Use fit to predict
bike_predictions[bike_predictions < 0] <- 1
submit <- cbind(test$datetime, bike_predictions)
colnames(submit) <- c("datetime", "count")
vroom_write(submit, "submit.csv")
write_csv(submit, "submit.csv")
submit$datetime <- as.Date(submit$datetime)
write_csv(submit, "submit.csv")
submit <- cbind(test$datetime, bike_predictions)
colnames(submit) <- c("datetime", "count")
write_csv(submit, "submit.csv")
as.character(submit$datetime)
submit$datetime <- as.character(submit$datetime)
write_csv(submit, "submit.csv")
View(submit)
View(test)
View(train)
View(wrangled)
